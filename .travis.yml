language: python
python: "3.7"

matrix:
    include:
        - os: linux
          dist: xenial
          compiler: gcc
          env:
            - CMAKE_COMPILER=g++
            - CONAN_COMPILER=gcc
            - CONAN_COMPILER_VERSION=5

        - os: linux
          dist: xenial
          compiler: clang
          env:
            - CMAKE_COMPILER=clang++
            - CONAN_COMPILER=clang
            - CONAN_COMPILER_VERSION=7.0

install:

    # Install conan
    - pip install conan
    # Automatic detection of your arch, compiler, etc.
    - conan user

    # Install CMake v3.14.3
    # Taken from https://riptutorial.com/cmake/example/4723/configure-travis-ci-with-newest-cmake
    # first we create a directory for the CMake binaries
    - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
    - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
    # we use wget to fetch the cmake binaries
    - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.14.3/cmake-3.14.3-Linux-x86_64.tar.gz
    # extract the binaries; the output here is quite lengthy,
    # so we swallow it to not clutter up the travis console
    - tar -xvf cmake-3.14.3-Linux-x86_64.tar.gz > /dev/null
    - mv cmake-3.14.3-Linux-x86_64 cmake-install
    # add both the top-level directory and the bin directory from the archive
    # to the system PATH. By adding it to the front of the path we hide the
    # preinstalled CMake with our own.
    - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
    # don't forget to switch back to the main build directory once you are done
    - cd ${TRAVIS_BUILD_DIR}

script:
    - mkdir build
    - cd build
    # Download dependencies and build project
    - conan install .. -s build_type=Debug -s compiler=${CONAN_COMPILER} -s compiler.libcxx=libstdc++ -s compiler.version=${CONAN_COMPILER_VERSION}
    # Call your build system
    - cmake -DCMAKE_CXX_COMPILER=${CMAKE_COMPILER} ..
    - cmake --build . --config Debug
